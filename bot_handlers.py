# bot_handlers.py
from __future__ import annotations

import sys
import tempfile
import datetime as dt
import asyncio
from html import escape
from pathlib import Path

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from settings import settings
from idempotency import chat_lock
from screenshot_service import (
    build_scraper_cmd,
    run_scraper,
    capture_page,   # —É—Ç–∏–ª–∏—Ç–∞-–æ–±—ë—Ä—Ç–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ build_scraper_cmd+run_scraper)
    sleep_ms,       # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
)
from ai_analysis import analyze_calendar_image_openai
from utils_telegram import send_table_or_text


# ---------- –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é:\n"
        "‚Ä¢ /calendar ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω, –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏—Å–ª–∞—Ç—å\n"
        "‚Ä¢ /batch ‚Äî —Å–æ–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (CAL_URLS)\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã /btc /eth /avax /help"
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /calendar ‚Äî —Å–∫—Ä–∏–Ω + –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (Actual/Forecast/Previous)\n"
        "‚Ä¢ /batch ‚Äî –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å–ø–∏—Å–∫—É CAL_URLS –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "‚Ä¢ /btc /eth /avax ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
    )


async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("BTC: üü†")


async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ETH: üî∑")


async def avax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("AVAX: üî∫")


# ---------- –û–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–∫—Ä–∏–Ω + –∞–Ω–∞–ª–∏–∑ ----------

async def calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lock = chat_lock(chat_id)

    if lock.locked():
        await update.message.reply_text("‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞‚Ä¶")
        return

    async with lock:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–µ—Ä—ë–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        try:
            if settings.OUT_PNG.exists():
                settings.OUT_PNG.unlink()
        except Exception:
            pass

        await update.message.reply_text("üßë‚Äçüíª –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚Ä¶")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        cmd = build_scraper_cmd(
            python_exec=sys.executable,
            scraper=settings.SCRAPER,
            url=settings.BATCH_URLS[0],  # –±–µ—Ä—ë–º –ü–ï–†–í–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–∫ ¬´–æ—Å–Ω–æ–≤–Ω—É—é¬ª
            out_png=settings.OUT_PNG,
            user_data_dir=settings.USER_DATA_DIR,
            wait_for=settings.WAIT_FOR,
            sleep_ms=settings.SLEEP_MS,
        )

        # –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ executor
        loop = asyncio.get_running_loop()
        with tempfile.TemporaryDirectory() as td:
            log_path = Path(td) / "scraper.log"
            try:
                proc = await loop.run_in_executor(
                    None,
                    lambda: run_scraper(cmd, settings.RUN_TIMEOUT, log_path),
                )
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                return

            if proc.returncode != 0:
                # –ø—Ä–∏–∫—Ä–µ–ø–∏–º —Ö–≤–æ—Å—Ç –ª–æ–≥–∞ ‚Äî —É–¥–æ–±–Ω–æ –¥–µ–±–∞–∂–∏—Ç—å
                tail = ""
                try:
                    tail = log_path.read_text(encoding="utf-8", errors="ignore")[-1500:]
                except Exception:
                    pass
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω–µ—Ä–∞ (–∫–æ–¥ {proc.returncode}).<pre>{escape(tail)}</pre>",
                    parse_mode="HTML",
                )
                return

        if not settings.OUT_PNG.exists():
            await update.message.reply_text("‚ùå –°–∫—Ä–∏–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞—â–∏—Ç–∞ —Å–∞–π—Ç–∞).")
            return

        # 1) —Ñ–æ—Ç–æ
        caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
        with settings.OUT_PNG.open("rb") as f:
            await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)

        # 2) –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if settings.OPENAI_API_KEY:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            table = await loop.run_in_executor(
                None,
                lambda: analyze_calendar_image_openai(settings.OUT_PNG, settings.OPENAI_API_KEY),
            )
            await send_table_or_text(chat_id, context, table)
        else:
            await context.bot.send_message(
                chat_id=chat_id, text="‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω: –∑–∞–¥–∞–π—Ç–µ OPENAI_API_KEY."
            )


# ---------- –ë–∞—Ç—á –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É URL-–æ–≤ ----------

async def batch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lock = chat_lock(chat_id)

    if lock.locked():
        await update.message.reply_text("‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è‚Ä¶")
        return

    urls = settings.BATCH_URLS
    total = len(urls)
    if total == 0:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ CAL_URLS –ø—É—Å—Ç.")
        return

    await update.message.reply_text(f"üöÄ –°—Ç–∞—Ä—Ç—É—é —Å–±–æ—Ä —Å {total} —Å—Ç—Ä–∞–Ω–∏—Ü. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç‚Ä¶")

    async with lock:
        combined_parts: list[str] = []
        loop = asyncio.get_running_loop()

        with tempfile.TemporaryDirectory() as td:
            tmpdir = Path(td)

            for idx, url in enumerate(urls, start=1):
                out_png = tmpdir / f"page_{idx:02d}.png"
                log_path = tmpdir / f"scraper_{idx:02d}.log"

                # ‚Äî 1) —Å–∫—Ä–∏–Ω
                try:
                    proc = await loop.run_in_executor(
                        None,
                        lambda: capture_page(
                            sys.executable, settings.SCRAPER, url, out_png,
                            settings.USER_DATA_DIR, settings.WAIT_FOR, settings.SLEEP_MS,
                            settings.RUN_TIMEOUT, log_path
                        ),
                    )
                    ok = proc.returncode == 0 and out_png.exists()
                except Exception as e:
                    ok = False
                    err = str(e)

                if not ok:
                    # —á–∏—Ç–∞–µ–º —Ö–≤–æ—Å—Ç –ª–æ–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    tail = ""
                    try:
                        tail = log_path.read_text(encoding="utf-8", errors="ignore")[-800:]
                    except Exception:
                        pass
                    header = f"| –ò—Å—Ç–æ—á–Ω–∏–∫ {idx}: {url} |\n|---|"
                    table = "| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | –§–∞–∫—Ç | –ü—Ä–æ–≥–Ω–æ–∑ | –ü—Ä–µ–¥—ã–¥—É—â–∏–π |\n|---|---:|---:|---:|\n| –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ |  |  |  |"
                    if tail:
                        table = f"| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | –§–∞–∫—Ç | –ü—Ä–æ–≥–Ω–æ–∑ | –ü—Ä–µ–¥—ã–¥—É—â–∏–π |\n|---|---:|---:|---:|\n| –û—à–∏–±–∫–∞: {escape(tail)[:200]} |  |  |  |"
                    combined_parts.append(header + "\n" + table)
                    sleep_ms(settings.BATCH_SLEEP_MS)
                    continue

                # ‚Äî 2) –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                table = await loop.run_in_executor(
                    None,
                    lambda: analyze_calendar_image_openai(out_png, settings.OPENAI_API_KEY),
                )

                if not table.strip().startswith("|"):
                    table = (
                        "| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | –§–∞–∫—Ç | –ü—Ä–æ–≥–Ω–æ–∑ | –ü—Ä–µ–¥—ã–¥—É—â–∏–π |\n"
                        "|---|---:|---:|---:|\n"
                        "| –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π |  |  |  |"
                    )

                header = f"| –ò—Å—Ç–æ—á–Ω–∏–∫ {idx}: {url} |\n|---|"
                combined_parts.append(header + "\n" + table)

                # ‚Äî 3) –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                sleep_ms(settings.BATCH_SLEEP_MS)

        # ‚Äî 4) —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–ª–µ–π–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        big = "\n\n".join(combined_parts)
        await send_table_or_text(chat_id, context, big)


# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----------

def register_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("eth", eth))
    app.add_handler(CommandHandler("avax", avax))
    app.add_handler(CommandHandler("calendar", calendar))
    app.add_handler(CommandHandler("batch", batch))
