# bot_handlers.py
import sys, tempfile, datetime as dt, asyncio
from html import escape
from pathlib import Path
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from settings import settings
from idempotency import chat_lock
from screenshot_service import build_scraper_cmd, run_scraper
from ai_analysis import analyze_calendar_image_openai
from utils_telegram import send_table_or_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /calendar, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω –∏ –∞–Ω–∞–ª–∏–∑.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /btc /eth /avax /calendar")

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("BTC: üü†")

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ETH: üî∑")

async def avax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("AVAX: üî∫")

async def calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lock = chat_lock(chat_id)

    if lock.locked():
        await update.message.reply_text("‚è≥ –£–∂–µ –¥–µ–ª–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫—Ä–∏–Ω...")
        return

    async with lock:
        await update.message.reply_text("üßë‚Äçüíª –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚Ä¶")
        cmd = build_scraper_cmd(
            sys.executable, settings.SCRAPER, settings.CALENDAR_URL,
            settings.OUT_PNG, settings.USER_DATA_DIR, settings.WAIT_FOR
        )

        with tempfile.TemporaryDirectory() as td:
            log_path = Path(td) / "scraper.log"
            try:
                # ‚¨áÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.get_running_loop().run_in_executor
                loop = asyncio.get_running_loop()
                proc = await loop.run_in_executor(
                    None, lambda: run_scraper(cmd, settings.RUN_TIMEOUT, log_path)
                )
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                return

            if proc.returncode != 0:
                tail = ""
                try:
                    tail = log_path.read_text(encoding="utf-8", errors="ignore")[-1500:]
                except Exception:
                    pass
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω–∞<pre>{escape(tail)}</pre>", parse_mode="HTML"
                )
                return

        if not settings.OUT_PNG.exists():
            await update.message.reply_text("‚ùå –°–∫—Ä–∏–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—â–∏—Ç–∞ —Å–∞–π—Ç–∞.")
            return

        # 1) —Ñ–æ—Ç–æ
        caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
        with settings.OUT_PNG.open("rb") as f:
            await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)

        # 2) –∞–Ω–∞–ª–∏–∑
        if settings.OPENAI_API_KEY:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            analysis = await loop.run_in_executor(
                None, lambda: analyze_calendar_image_openai(settings.OUT_PNG, settings.OPENAI_API_KEY)
            )
            await send_table_or_text(chat_id, context, analysis)   # <-- –≤–æ—Ç —ç—Ç–æ
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω: –∑–∞–¥–∞–π—Ç–µ OPENAI_API_KEY."
            )

def register_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("eth", eth))
    app.add_handler(CommandHandler("avax", avax))
    app.add_handler(CommandHandler("calendar", calendar))
