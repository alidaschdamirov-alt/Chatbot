import os
import sys
import asyncio
import subprocess
import datetime as dt
from pathlib import Path
from html import escape

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "PUT_YOUR_TOKEN_HERE")
if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_TOKEN_HERE":
    raise RuntimeError("Set BOT_TOKEN env")

WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")  # –µ—Å–ª–∏ –∑–∞–¥–∞–¥–∏—Ç–µ, Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Ç–æ—Ç –∂–µ secret_token

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º)
SCRAPER = Path(__file__).with_name("screenshot_page.py")

# –ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
OUT_PNG = Path(__file__).with_name("page.png")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å persistent cookies (–¥–ª—è Cloudflare); –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –µ—ë, —á—Ç–æ–±—ã –∫—É–∫–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–ª–∏ –¥–µ–ø–ª–æ–π
USER_DATA_DIR = Path(__file__).with_name("user-data")

# URL –∏–∑ –≤–∞—à–µ–≥–æ iframe (—Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å)
CALENDAR_URL = os.environ.get(
    "CAL_URL",
    "https://www.investing.com/economic-calendar/cpi-68"
)

# –¢–∞–π–º–∏–Ω–≥–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
WAIT_SECONDS = int(os.environ.get("CAL_WAIT", "50"))          # –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏dd
RUN_TIMEOUT = int(os.environ.get("CAL_TIMEOUT", "90"))        # —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–µ–∫

# ===== FastAPI app =====
app = FastAPI(title="TG Bot Webhook + Screenshot")

# ===== PTB Application (v20+) =====
application = ApplicationBuilder().token(BOT_TOKEN).build() 
 


# ===== –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö ü§ñ\n"
        "–ö–æ–º–∞–Ω–¥–∞: /calendar ‚Äî –ø—Ä–∏—à–ª—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /btc /eth /avax /calendar")

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("BTC: üü†")

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ETH: üî∑")

async def avax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("AVAX: üî∫")


async def calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Å–∫—Ä–∏–Ω–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PNG –≤ —á–∞—Ç."""
    chat_id = update.effective_chat.id

    if not SCRAPER.exists():
        await update.message.reply_text(
            f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç: {SCRAPER.name}\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ —Ä—è–¥–æ–º —Ñ–∞–π–ª screenshot_page.py (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∫—Ä–∏–Ω–∞)."
        )
        return

    # –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—à–ª—É—é
    try:
        if OUT_PNG.exists():
            OUT_PNG.unlink()
    except Exception:
        pass

    await update.message.reply_text("‚è≥ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚Ä¶")

    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Å–∫—Ä–∏–Ω–µ—Ä–∞
    # –í–ê–ñ–ù–û: screenshot_page.py –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —Ñ–ª–∞–≥–∏
    cmd = [
        sys.executable, str(SCRAPER),
        "--url", CALENDAR_URL,
        "--out", str(OUT_PNG),
        "--wait", str(WAIT_SECONDS),
        "--user-data-dir", str(USER_DATA_DIR),
        "--headless",
    ]

    loop = asyncio.get_running_loop()
    try:
        # subprocess.run –±–ª–æ–∫–∏—Ä—É—é—â–∏–π ‚Äî –≤—ã–Ω–æ—Å–∏–º –≤ executor
        proc = await loop.run_in_executor(
            None,
            lambda: subprocess.run(
                cmd, capture_output=True, text=True, timeout=RUN_TIMEOUT
            )
        )
    except subprocess.TimeoutExpired:
        await update.message.reply_text("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return

    if proc.returncode != 0:
        tail = (proc.stderr or proc.stdout or "")[-1800:]
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–µ Telegram
        await update.message.reply_text(
            f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {proc.returncode}.<pre>{escape(tail)}</pre>",
            parse_mode="HTML",
        )
        return

    if not OUT_PNG.exists():
        await update.message.reply_text(
            "‚ùå –°–∫—Ä–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Cloudflare.\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ --headless, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É 1 —Ä–∞–∑, "
            "–∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ user-data."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
    with OUT_PNG.open("rb") as f:
        await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(CommandHandler("btc", btc))
application.add_handler(CommandHandler("eth", eth))
application.add_handler(CommandHandler("avax", avax))
application.add_handler(CommandHandler("calendar", calendar))


# ===== FastAPI endpoints =====
@app.get("/")
def healthcheck():
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if WEBHOOK_SECRET:
        given = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if given != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="bad secret token")

    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}
