import os
import sys
import asyncio
import subprocess
import datetime as dt
from pathlib import Path
from html import escape
import tempfile
import time
from collections import OrderedDict, defaultdict

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "PUT_YOUR_TOKEN_HERE")
if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_TOKEN_HERE":
    raise RuntimeError("Set BOT_TOKEN env")

WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")

SCRAPER = Path(__file__).with_name("screenshot_page.py")
OUT_PNG = Path(__file__).with_name("page.png")
USER_DATA_DIR = Path(__file__).with_name("user-data")
USER_DATA_DIR.mkdir(exist_ok=True)

CALENDAR_URL = os.environ.get("CAL_URL", "https://ru.investing.com/economic-calendar/unemployment-rate-300")
RUN_TIMEOUT = int(os.environ.get("CAL_TIMEOUT", "150"))  # —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞

# ===== –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨ & –õ–û–ö–ò =====
SEEN_TTL = 600  # —Å–µ–∫ —Ö—Ä–∞–Ω–∏—Ç—å update_id (10 –º–∏–Ω—É—Ç)
SEEN_MAX = 2000
_seen_updates: "OrderedDict[int, float]" = OrderedDict()  # update_id -> ts
_chat_locks: "defaultdict[int, asyncio.Lock]" = defaultdict(asyncio.Lock)

def remember_update(update_id: int) -> bool:
    """True –µ—Å–ª–∏ —ç—Ç–æ –ù–û–í–´–ô update_id; False –µ—Å–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ (–¥—É–±–ª–∏–∫–∞—Ç)."""
    now = time.time()
    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ç—É—Ö—à–∏–µ
    while _seen_updates and now - next(iter(_seen_updates.values())) > SEEN_TTL:
        _seen_updates.popitem(last=False)
    if update_id in _seen_updates:
        return False
    _seen_updates[update_id] = now
    # –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –ø–∞–º—è—Ç—å
    while len(_seen_updates) > SEEN_MAX:
        _seen_updates.popitem(last=False)
    return True

# ===== FastAPI app & PTB =====
app = FastAPI(title="TG Bot Webhook + Screenshot")
application = ApplicationBuilder().token(BOT_TOKEN).build()

@app.on_event("startup")
async def _on_startup():
    await application.initialize()
    await application.start()

@app.on_event("shutdown")
async def _on_shutdown():
    await application.stop()
    await application.shutdown()

# ===== –•–≠–ù–î–õ–ï–†–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö ü§ñ\n"
        "–ö–æ–º–∞–Ω–¥–∞: /calendar ‚Äî –ø—Ä–∏—à–ª—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /btc /eth /avax /calendar")

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("BTC: üü†")

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ETH: üî∑")

async def avax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("AVAX: üî∫")

async def calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lock = _chat_locks[chat_id]

    # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—â—ë –∏–¥—ë—Ç
    if lock.locked():
        await update.message.reply_text("‚è≥ –£–∂–µ –¥–µ–ª–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫—Ä–∏–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶")
        return

    if not SCRAPER.exists():
        await update.message.reply_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {SCRAPER.name}. –ü–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º screenshot_page.py")
        return

    # –≤—Å—ë –≤–Ω—É—Ç—Ä–∏ –ª–æ–∫–∞
    async with lock:
        try:
            if OUT_PNG.exists():
                OUT_PNG.unlink()
        except Exception:
            pass

        await update.message.reply_text("üßë‚Äçüíª –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚Ä¶")

        cmd = [
            sys.executable, str(SCRAPER),
            "--url", CALENDAR_URL,
            "--out", str(OUT_PNG),
            "--user-data-dir", str(USER_DATA_DIR),
            "--wait-for", ".common-table",
            "--wait-for", "table",
        ]

        loop = asyncio.get_running_loop()
        with tempfile.TemporaryDirectory() as td:
            log_path = Path(td) / "scraper.log"
            with log_path.open("w", encoding="utf-8") as lf:
                try:
                    proc = await loop.run_in_executor(
                        None,
                        lambda: subprocess.run(
                            cmd,
                            stdout=lf,
                            stderr=subprocess.STDOUT,
                            text=True,
                            timeout=RUN_TIMEOUT,
                        )
                    )
                except subprocess.TimeoutExpired:
                    await update.message.reply_text("‚è≥ –¢–∞–π–º–∞—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return
                except Exception as e:
                    await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                    return

            if proc.returncode != 0:
                try:
                    tail = log_path.read_text(encoding="utf-8", errors="ignore")[-1800:]
                except Exception:
                    tail = ""
                await update.message.reply_text(
                    f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {proc.returncode}.<pre>{escape(tail)}</pre>",
                    parse_mode="HTML",
                )
                return

        if not OUT_PNG.exists():
            await update.message.reply_text(
                "‚ùå –°–∫—Ä–∏–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞—â–∏—Ç–∞ —Å–∞–π—Ç–∞). "
                "–û—Ç–∫—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ headless, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏ –≤ user-data."
            )
            return

        caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
        with OUT_PNG.open("rb") as f:
            await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(CommandHandler("btc", btc))
application.add_handler(CommandHandler("eth", eth))
application.add_handler(CommandHandler("avax", avax))
application.add_handler(CommandHandler("calendar", calendar))

# ===== –í–µ–±—Ö—É–∫ =====
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if WEBHOOK_SECRET:
        given = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if given != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="bad secret token")

    data = await request.json()
    update = Update.de_json(data, application.bot)

    # --- –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨ ---
    if not remember_update(update.update_id):
        # –¥—É–±–ª–∏–∫–∞—Ç ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
        return {"ok": True}

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å Telegram —Å—Ä–∞–∑—É (–±–µ–∑ 499/–ø–æ–≤—Ç–æ—Ä–æ–≤)
    asyncio.create_task(application.process_update(update))
    return {"ok": True}

@app.get("/")
def healthcheck():
    return {"status": "ok"}
