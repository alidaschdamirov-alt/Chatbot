import os
import subprocess
import datetime as dt
from pathlib import Path

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse
from telegram import Update
from telegram.ext import Updater, Dispatcher, CommandHandler, CallbackContext

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù"
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")

app = FastAPI()

# ===== –í–°–¢–ê–í–õ–Ø–ï–ú –í–ê–® /embed =====
IFRAME_HTML = """
<!doctype html><meta charset="utf-8">
<style>html,body,iframe{margin:0;height:100%;width:100%;border:0;}</style>
<iframe src="https://sslecal2.investing.com?columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous&category=_employment,_economicActivity,_inflation,_credit,_centralBanks,_confidenceIndex,_balance,_Bonds&importance=2,3&features=datepicker,timezone&countries=37,5&calType=week&timeZone=73&lang=1"></iframe>
<div class="poweredBy" style="position:fixed;left:0;right:0;bottom:0;text-align:center;font:12px Arial;">Real Time Economic Calendar provided by <a href="https://www.investing.com/" target="_blank">Investing.com</a>.</div>
"""

@app.get("/embed", response_class=HTMLResponse)
def embed():
    return IFRAME_HTML

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø PTB =====
updater = Updater(BOT_TOKEN, use_context=True)
dp: Dispatcher = updater.dispatcher

# ===== –•–≠–ù–î–õ–ï–†–´ –ë–û–¢–ê =====
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö ü§ñ\n–ö–æ–º–∞–Ω–¥–∞: /calendar ‚Äî –ø—Ä–∏—à–ª—é —Å–∫—Ä–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")

def help_cmd(update: Update, context: CallbackContext):
    update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /calendar")

def calendar(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫—Ä–∏–Ω–∞ /embed –∏ —à–ª—ë—Ç PNG."""
    chat = update.effective_chat
    SCRAPER = Path(__file__).with_name("screenshot_page.py")
    OUT_PNG = Path(__file__).with_name("page.png")
    USER_DATA_DIR = Path(__file__).with_name("user-data")

    if not SCRAPER.exists():
        update.message.reply_text("‚ùå –°–∫—Ä–∏–ø—Ç screenshot_page.py –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        if OUT_PNG.exists():
            OUT_PNG.unlink()
    except Exception:
        pass

    update.message.reply_text("‚è≥ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω /embed ...")

    cmd = [
        "python", str(SCRAPER),
        "--url", "http://127.0.0.1:8000/embed",  # —Å–∫—Ä–∏–Ω–∏–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        "--out", str(OUT_PNG),
        "--wait", "8",
        "--user-data-dir", str(USER_DATA_DIR),
        "--headless"
    ]

    try:
        proc = subprocess.run(cmd, capture_output=True, text=True, timeout=90)
    except subprocess.TimeoutExpired:
        update.message.reply_text("‚è≥ –°–∫—Ä–∏–Ω –Ω–µ —É—Å–ø–µ–ª —Å–æ–∑–¥–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if proc.returncode != 0 or not OUT_PNG.exists():
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {proc.stderr or proc.stdout}")
        return

    caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
    with OUT_PNG.open("rb") as f:
        context.bot.send_photo(chat_id=chat.id, photo=f, caption=caption)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("help", help_cmd))
dp.add_handler(CommandHandler("calendar", calendar))

# ===== –•–≠–õ–°–ß–ï–ö –ò –í–ï–ë–•–£–ö =====
@app.get("/")
def healthcheck():
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    if WEBHOOK_SECRET:
        given = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if given != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="bad secret token")

    data = await request.json()
    update = Update.de_json(data, dp.bot)
    dp.process_update(update)
    return {"ok": True}
