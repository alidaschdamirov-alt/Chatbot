import os
import sys
import asyncio
import subprocess
import datetime as dt
from pathlib import Path
from html import escape
import tempfile
import time
from collections import OrderedDict, defaultdict
import base64

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get("BOT_TOKEN", "PUT_YOUR_TOKEN_HERE")
if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_TOKEN_HERE":
    raise RuntimeError("Set BOT_TOKEN env")

WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

SCRAPER = Path(__file__).with_name("screenshot_page.py")
OUT_PNG = Path(__file__).with_name("page.png")
USER_DATA_DIR = Path(__file__).with_name("user-data")
USER_DATA_DIR.mkdir(exist_ok=True)

CALENDAR_URL = os.environ.get("CAL_URL", "https://ru.investing.com/economic-calendar/unemployment-rate-300")
RUN_TIMEOUT = int(os.environ.get("CAL_TIMEOUT", "150"))  # —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞

# ===== –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨ & –õ–û–ö–ò =====
SEEN_TTL = 600  # —Å–µ–∫ —Ö—Ä–∞–Ω–∏—Ç—å update_id
SEEN_MAX = 2000
_seen_updates: "OrderedDict[int, float]" = OrderedDict()  # update_id -> ts
_chat_locks: "defaultdict[int, asyncio.Lock]" = defaultdict(asyncio.Lock)

def remember_update(update_id: int) -> bool:
    now = time.time()
    while _seen_updates and now - next(iter(_seen_updates.values())) > SEEN_TTL:
        _seen_updates.popitem(last=False)
    if update_id in _seen_updates:
        return False
    _seen_updates[update_id] = now
    while len(_seen_updates) > SEEN_MAX:
        _seen_updates.popitem(last=False)
    return True

# ===== FastAPI & PTB =====
app = FastAPI(title="TG Bot Webhook + Screenshot + Analysis")
application = ApplicationBuilder().token(BOT_TOKEN).build()

@app.on_event("startup")
async def _on_startup():
    await application.initialize()
    await application.start()

@app.on_event("shutdown")
async def _on_shutdown():
    await application.stop()
    await application.shutdown()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI =====
async def analyze_calendar_image(png_path: Path) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ.
    –¢–µ–º—ã: —Å—Ç–∞–≤–∫–∞ –§–†–°, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç—É, –∏–Ω–¥–µ–∫—Å –¥–æ–ª–ª–∞—Ä–∞ (DXY), –∞–∫—Ü–∏–∏ (S&P/Nasdaq).
    """
    if not OPENAI_API_KEY:
        return "‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω."

    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)

        with png_path.open("rb") as f:
            b64 = base64.b64encode(f.read()).decode()

        system_msg = (
            "–¢—ã ‚Äî –º–∞–∫—Ä–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: "
            "1) –∫–æ—Ä–æ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è/—Ä–µ–ª–∏–∑—ã (–≤—Ä–µ–º—è, –≤–∞–∂–Ω–æ—Å—Ç—å). "
            "2) –æ—Ü–µ–Ω–∏, –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –§–†–° –ø–æ —Å—Ç–∞–≤–∫–µ "
            "(—á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –∏–Ω—Ñ–ª—è—Ü–∏–∏/—Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏). "
            "3) –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ BTC/–∫—Ä–∏–ø—Ç–æ, –∏–Ω–¥–µ–∫—Å—É –¥–æ–ª–ª–∞—Ä–∞ (DXY) –∏ –∞–∫—Ü–∏—è–º (S&P/Nasdaq). "
            "4) –æ—Ç–º–µ—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ä–∏—Å–∫–∏/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏. "
            "–ö—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –±–µ–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤."
        )
        user_prompt = (
            "–°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É. –§–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–ª–∏–∑—ã\n‚Ä¢ –°—Ç–∞–≤–∫–∞ –§–†–°: –∏–º–ø–ª–∏–∫–∞—Ü–∏–∏\n‚Ä¢ BTC/–∫—Ä–∏–ø—Ç–æ\n‚Ä¢ DXY\n‚Ä¢ –ê–∫—Ü–∏–∏ (S&P/Nasdaq)\n‚Ä¢ –†–∏—Å–∫–∏"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å; gpt-4o-mini –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–æ—â–Ω—É—é.
        resp = client.chat.completions.create(
            model="gpt-5",
            messages=[
                {"role": "system", "content": system_msg},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": user_prompt},
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/png;base64,{b64}"}
                        },
                    ],
                },
            ],
            temperature=0.2,
            max_tokens=600,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

# ===== –•–≠–ù–î–õ–ï–†–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞: /calendar ‚Äî –ø—Ä–∏—à–ª—é —Å–∫—Ä–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–§–†–°, –∫—Ä–∏–ø—Ç–∞, DXY, –∞–∫—Ü–∏–∏)."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /btc /eth /avax /calendar")

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("BTC: üü†")

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ETH: üî∑")

async def avax(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("AVAX: üî∫")

async def calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lock = _chat_locks[chat_id]

    if lock.locked():
        await update.message.reply_text("‚è≥ –£–∂–µ –¥–µ–ª–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫—Ä–∏–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
        return

    if not SCRAPER.exists():
        await update.message.reply_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {SCRAPER.name}. –ü–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º screenshot_page.py")
        return

    async with lock:
        try:
            if OUT_PNG.exists():
                OUT_PNG.unlink()
        except Exception:
            pass

        await update.message.reply_text("üßë‚Äçüíª –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚Ä¶")

        cmd = [
            sys.executable, str(SCRAPER),
            "--url", CALENDAR_URL,
            "--out", str(OUT_PNG),
            "--user-data-dir", str(USER_DATA_DIR),
            "--wait-for", ".common-table",
            "--wait-for", "table",
        ]

        loop = asyncio.get_running_loop()
        with tempfile.TemporaryDirectory() as td:
            log_path = Path(td) / "scraper.log"
            with log_path.open("w", encoding="utf-8") as lf:
                try:
                    proc = await loop.run_in_executor(
                        None,
                        lambda: subprocess.run(
                            cmd,
                            stdout=lf,
                            stderr=subprocess.STDOUT,
                            text=True,
                            timeout=RUN_TIMEOUT,
                        )
                    )
                except subprocess.TimeoutExpired:
                    await update.message.reply_text("‚è≥ –¢–∞–π–º–∞—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return
                except Exception as e:
                    await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
                    return

            if proc.returncode != 0:
                try:
                    tail = log_path.read_text(encoding="utf-8", errors="ignore")[-1800:]
                except Exception:
                    tail = ""
                await update.message.reply_text(
                    f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {proc.returncode}.<pre>{escape(tail)}</pre>",
                    parse_mode="HTML",
                )
                return

        if not OUT_PNG.exists():
            await update.message.reply_text(
                "‚ùå –°–∫—Ä–∏–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞—â–∏—Ç–∞ —Å–∞–π—Ç–∞). "
                "–û—Ç–∫—Ä–æ–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ headless, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏ –≤ user-data."
            )
            return

        # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
        with OUT_PNG.open("rb") as f:
            await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)

        # 2) –¥–µ–ª–∞–µ–º –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
        if OPENAI_API_KEY:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            analysis = await analyze_calendar_image(OUT_PNG)
            await context.bot.send_message(chat_id=chat_id, text=analysis)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω: –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY."
            )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(CommandHandler("btc", btc))
application.add_handler(CommandHandler("eth", eth))
application.add_handler(CommandHandler("avax", avax))
application.add_handler(CommandHandler("calendar", calendar))

# ===== –í–µ–±—Ö—É–∫ =====
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if WEBHOOK_SECRET:
        given = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if given != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="bad secret token")

    data = await request.json()
    update = Update.de_json(data, application.bot)

    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if not remember_update(update.update_id):
        return {"ok": True}

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å OK (–±–µ–∑ 499)
    asyncio.create_task(application.process_update(update))
    return {"ok": True}

@app.get("/")
def healthcheck():
    return {"status": "ok"}
