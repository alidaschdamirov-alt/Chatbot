import os
from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import Updater, Dispatcher, CommandHandler, CallbackContext

BOT_TOKEN = os.environ["8351457188:AAFQZAI19EVjSbhLsjwfn7eFXtp79td3274"]  # –∑–∞–¥–∞–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö PaaS
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")  # –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PTB (—Ç–æ–ª—å–∫–æ dispatcher, –±–µ–∑ polling)
updater = Updater("8351457188:AAFQZAI19EVjSbhLsjwfn7eFXtp79td3274", use_context=True)
dp: Dispatcher = updater.dispatcher

# --- handlers ---
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö ü§ñ")

def help_cmd(update: Update, context: CallbackContext):
    update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /btc /eth /avax")

def btc(update: Update, context: CallbackContext):
    update.message.reply_text("BTC: üü†")

def eth(update: Update, context: CallbackContext):
    update.message.reply_text("ETH: üî∑")

def avax(update: Update, context: CallbackContext):
    update.message.reply_text("AVAX: üî∫")

dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("help", help_cmd))
dp.add_handler(CommandHandler("btc", btc))
dp.add_handler(CommandHandler("eth", eth))
dp.add_handler(CommandHandler("avax", avax))

# --- FastAPI endpoints ---
@app.get("/")
def healthcheck():
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Å–æ–≤–µ—Ç—É—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ WEBHOOK_SECRET –≤ –≤–∞—à–µ–º –±–æ—Ç–µ –∏ setWebhook)
    if WEBHOOK_SECRET:
        given = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if given != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="bad secret token")

    data = await request.json()
    update = Update.de_json(data, dp.bot)
    dp.process_update(update)
    return {"ok": True}
