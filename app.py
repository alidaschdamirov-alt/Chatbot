import os
import subprocess
import datetime as dt
from pathlib import Path

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import Updater, Dispatcher, CommandHandler, CallbackContext

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
# –†–ï–ö–û–ú–ï–ù–î–£–Æ: –¥–µ—Ä–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN (Render ‚Üí Environment)
BOT_TOKEN = os.environ.get("BOT_TOKEN") or "8351457188:AAFQZAI19EVjSbhLsjwfn7eFXtp79td3274"
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")  # –µ—Å–ª–∏ –∑–∞–¥–∞–¥–∏—Ç–µ, Telegram –¥–æ–ª–∂–µ–Ω —Å–ª–∞—Ç—å —Ç–æ—Ç –∂–µ secret_token

# –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É (–ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º)
SCRAPER = Path(__file__).with_name("scrape_investing_calendar.py")
OUT_PNG = Path(__file__).with_name("table_only.png")
USER_DATA_DIR = Path(__file__).with_name("user-data")  # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies (Cloudflare)
WAIT_SECONDS = os.environ.get("CAL_WAIT", "5")        # –¥–æ–ø.–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
RUN_TIMEOUT = int(os.environ.get("CAL_TIMEOUT", "90"))  # —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–µ–∫

# URL –∏–∑ –≤–∞—à–µ–≥–æ iframe
CALENDAR_URL = (
    "https://sslecal2.investing.com?"
    "columns=exc_flags,exc_currency,exc_importance,exc_actual,exc_forecast,exc_previous"
    "&category=_employment,_economicActivity,_inflation,_credit,_centralBanks,_confidenceIndex,_balance,_Bonds"
    "&importance=2,3&features=datepicker,timezone&countries=37,5&calType=week&timeZone=73&lang=1"
)

app = FastAPI()

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB (–±–µ–∑ polling) =====
updater = Updater(BOT_TOKEN, use_context=True)
dp: Dispatcher = updater.dispatcher

# ===== –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ =====
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö ü§ñ\n–ö–æ–º–∞–Ω–¥–∞: /calendar ‚Äî –ø—Ä–∏—à–ª—é —Å–∫—Ä–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")

def help_cmd(update: Update, context: CallbackContext):
    update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /btc /eth /avax /calendar")

def btc(update: Update, context: CallbackContext):
    update.message.reply_text("BTC: üü†")

def eth(update: Update, context: CallbackContext):
    update.message.reply_text("ETH: üî∑")

def avax(update: Update, context: CallbackContext):
    update.message.reply_text("AVAX: üî∫")

def calendar(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Å–∫—Ä–∏–Ω–Ω–µ—Ä–∞ –∏ —à–ª—ë—Ç PNG –≤ —á–∞—Ç."""
    chat = update.effective_chat

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    if not SCRAPER.exists():
        update.message.reply_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç: {SCRAPER.name}\n"
                                  f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å main.py.")
        return

    # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π PNG
    try:
        if OUT_PNG.exists():
            OUT_PNG.unlink()
    except Exception:
        pass

    update.message.reply_text("‚è≥ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è‚Ä¶")

    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ Playwright-—Å–∫—Ä–∏–Ω–µ—Ä–∞
    cmd = [
        "python", str(SCRAPER),
        "--url", CALENDAR_URL,
        "--out", str(OUT_PNG),
        "--wait", str(WAIT_SECONDS),
        "--user-data-dir", str(USER_DATA_DIR),
        "--headless"
    ]

    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=RUN_TIMEOUT
        )
    except subprocess.TimeoutExpired:
        update.message.reply_text("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return

    if proc.returncode != 0:
        tail = (proc.stderr or proc.stdout or "")[-2000:]
        update.message.reply_text(f"‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {proc.returncode}.\n```\n{tail}\n```",
                                  parse_mode="Markdown")
        return

    if not OUT_PNG.exists():
        update.message.reply_text("‚ùå –°–∫—Ä–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Cloudflare.\n"
                                  "–û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ --headless, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É 1 —Ä–∞–∑, "
                                  "–∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ user-data.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    caption = f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Ä¢ {dt.datetime.now():%Y-%m-%d %H:%M}"
    with OUT_PNG.open("rb") as f:
        context.bot.send_photo(chat_id=chat.id, photo=f, caption=caption)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("help", help_cmd))
dp.add_handler(CommandHandler("btc", btc))
dp.add_handler(CommandHandler("eth", eth))
dp.add_handler(CommandHandler("avax", avax))
dp.add_handler(CommandHandler("calendar", calendar))

# ===== FastAPI endpoints =====
@app.get("/")
def healthcheck():
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if WEBHOOK_SECRET:
        given = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
        if given != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="bad secret token")

    data = await request.json()
    update = Update.de_json(data, dp.bot)
    dp.process_update(update)
    return {"ok": True}
